"""update_user_profile_remaining_fields

Revision ID: df8be496aa16
Revises: 235147181482
Create Date: 2024-11-17 00:36:58.426357

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'df8be496aa16'
down_revision = '235147181482'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First update existing data with default values
    op.execute('UPDATE user_profiles SET age = 25 WHERE age IS NULL')
    op.execute('UPDATE user_profiles SET gender = "PREFER_NOT_TO_SAY" WHERE gender IS NULL')
    op.execute('UPDATE user_profiles SET height = 170 WHERE height IS NULL')
    op.execute('UPDATE user_profiles SET weight = 70 WHERE weight IS NULL')
    op.execute('UPDATE user_profiles SET target_weight = weight WHERE target_weight IS NULL')
    op.execute('UPDATE user_profiles SET activity_level = "MODERATELY_ACTIVE" WHERE activity_level IS NULL')
    op.execute('UPDATE user_profiles SET experience_level = "BEGINNER" WHERE experience_level IS NULL')
    op.execute('UPDATE user_profiles SET workout_time_preference = "FLEXIBLE" WHERE workout_time_preference IS NULL')
    op.execute('UPDATE user_profiles SET daily_calorie_goal = 2000 WHERE daily_calorie_goal IS NULL')
    op.execute('UPDATE user_profiles SET protein_goal = 150 WHERE protein_goal IS NULL')
    op.execute('UPDATE user_profiles SET carbs_goal = 250 WHERE carbs_goal IS NULL')
    op.execute('UPDATE user_profiles SET fat_goal = 70 WHERE fat_goal IS NULL')
    op.execute('UPDATE user_profiles SET water_goal = 2.5 WHERE water_goal IS NULL')

    # Create a temporary table with all the columns we want
    op.execute("""
    CREATE TABLE user_profiles_new (
        id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        age INTEGER NOT NULL,
        gender VARCHAR(6) NOT NULL,
        height FLOAT NOT NULL,
        weight FLOAT NOT NULL,
        target_weight FLOAT NOT NULL,
        blood_type VARCHAR(11),
        activity_level VARCHAR(17) NOT NULL,
        experience_level VARCHAR(12) NOT NULL,
        workout_time_preference VARCHAR(9) NOT NULL,
        daily_calorie_goal INTEGER NOT NULL,
        protein_goal INTEGER NOT NULL,
        carbs_goal INTEGER NOT NULL,
        fat_goal INTEGER NOT NULL,
        water_goal FLOAT NOT NULL,
        use_metric BOOLEAN,
        body_fat_percentage FLOAT,
        waist_circumference FLOAT,
        medical_conditions JSON,
        medications JSON,
        allergies JSON,
        food_intolerances JSON,
        family_health_history JSON,
        past_injuries JSON,
        dietary_preference VARCHAR(11),
        food_preferences JSON,
        preferred_cuisines JSON,
        supplement_use JSON,
        sleep_time TIME,
        wake_time TIME,
        sleep_hours FLOAT,
        stress_level INTEGER,
        fitness_goal VARCHAR(20) NOT NULL DEFAULT 'MAINTENANCE',
        workout_frequency INTEGER NOT NULL DEFAULT 3,
        preferred_workout_types JSON NOT NULL DEFAULT '["cardio"]',
        weight_goal_rate FLOAT,
        target_date DATETIME,
        motivation_factors JSON,
        meal_frequency INTEGER NOT NULL DEFAULT 3,
        snacking_frequency VARCHAR(10),
        meal_preferences JSON,
        notification_preferences JSON,
        tracking_frequency JSON,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
    """)

    # Copy data from the old table to the new one
    op.execute("""
    INSERT INTO user_profiles_new (
        id, user_id, age, gender, height, weight, target_weight,
        blood_type, activity_level, experience_level, workout_time_preference,
        daily_calorie_goal, protein_goal, carbs_goal, fat_goal, water_goal,
        use_metric, body_fat_percentage, waist_circumference,
        medical_conditions, medications, allergies, food_intolerances,
        family_health_history, past_injuries, dietary_preference,
        food_preferences, preferred_cuisines, supplement_use,
        sleep_time, wake_time, sleep_hours, stress_level
    )
    SELECT id, user_id, age, gender, height, weight, target_weight,
        blood_type, activity_level, experience_level, workout_time_preference,
        daily_calorie_goal, protein_goal, carbs_goal, fat_goal, water_goal,
        use_metric, body_fat_percentage, waist_circumference,
        medical_conditions, medications, allergies, food_intolerances,
        family_health_history, past_injuries, dietary_preference,
        food_preferences, preferred_cuisines, supplement_use,
        sleep_time, wake_time, sleep_hours, stress_level
    FROM user_profiles
    """)

    # Drop the old table and rename the new one
    op.execute("DROP TABLE user_profiles")
    op.execute("ALTER TABLE user_profiles_new RENAME TO user_profiles")

    # Create index on user_id
    op.execute("CREATE INDEX ix_user_profiles_id ON user_profiles (id)")
    op.execute("CREATE UNIQUE INDEX ix_user_profiles_user_id ON user_profiles (user_id)")


def downgrade() -> None:
    # For downgrade, we'll create a table with the old schema
    op.execute("""
    CREATE TABLE user_profiles_old (
        id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        age INTEGER,
        gender VARCHAR(6),
        height FLOAT,
        weight FLOAT,
        target_weight FLOAT,
        blood_type VARCHAR(11),
        activity_level VARCHAR(17),
        experience_level VARCHAR(12),
        workout_time_preference VARCHAR(9),
        daily_calorie_goal INTEGER,
        protein_goal INTEGER,
        carbs_goal INTEGER,
        fat_goal INTEGER,
        water_goal FLOAT,
        use_metric BOOLEAN,
        body_fat_percentage FLOAT,
        waist_circumference FLOAT,
        medical_conditions JSON,
        medications JSON,
        allergies JSON,
        food_intolerances JSON,
        family_health_history JSON,
        past_injuries JSON,
        dietary_preference VARCHAR(11),
        food_preferences JSON,
        preferred_cuisines JSON,
        supplement_use JSON,
        sleep_time TIME,
        wake_time TIME,
        sleep_hours FLOAT,
        stress_level INTEGER,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
    """)

    # Copy the data back, excluding new columns
    op.execute("""
    INSERT INTO user_profiles_old (
        id, user_id, age, gender, height, weight, target_weight,
        blood_type, activity_level, experience_level, workout_time_preference,
        daily_calorie_goal, protein_goal, carbs_goal, fat_goal, water_goal,
        use_metric, body_fat_percentage, waist_circumference,
        medical_conditions, medications, allergies, food_intolerances,
        family_health_history, past_injuries, dietary_preference,
        food_preferences, preferred_cuisines, supplement_use,
        sleep_time, wake_time, sleep_hours, stress_level
    )
    SELECT id, user_id, age, gender, height, weight, target_weight,
        blood_type, activity_level, experience_level, workout_time_preference,
        daily_calorie_goal, protein_goal, carbs_goal, fat_goal, water_goal,
        use_metric, body_fat_percentage, waist_circumference,
        medical_conditions, medications, allergies, food_intolerances,
        family_health_history, past_injuries, dietary_preference,
        food_preferences, preferred_cuisines, supplement_use,
        sleep_time, wake_time, sleep_hours, stress_level
    FROM user_profiles
    """)

    # Drop the new table and rename the old one
    op.execute("DROP TABLE user_profiles")
    op.execute("ALTER TABLE user_profiles_old RENAME TO user_profiles")

    # Recreate indexes
    op.execute("CREATE INDEX ix_user_profiles_id ON user_profiles (id)")
    op.execute("CREATE UNIQUE INDEX ix_user_profiles_user_id ON user_profiles (user_id)")
